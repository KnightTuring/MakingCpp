        -:    0:Source:/usr/local/include/cppunit/extensions/TestSuiteBuilderContext.h
        -:    0:Programs:2
        -:    1:#ifndef CPPUNIT_HELPER_TESTSUITEBUILDERCONTEXT_H
        -:    2:#define CPPUNIT_HELPER_TESTSUITEBUILDERCONTEXT_H
        -:    3:
        -:    4:#include <cppunit/Portability.h>
        -:    5:#include <map>
        -:    6:#include <string>
        -:    7:
        -:    8:#if CPPUNIT_NEED_DLL_DECL
        -:    9:#pragma warning( push )
        -:   10:#pragma warning( disable: 4251 )  // X needs to have dll-interface to be used by clients of class Z
        -:   11:#endif
        -:   12:
        -:   13:
        -:   14:CPPUNIT_NS_BEGIN
        -:   15:
        -:   16:class TestSuite;
        -:   17:class TestFixture;
        -:   18:class TestFixtureFactory;
        -:   19:class TestNamer;
        -:   20:
        -:   21:/*! \brief Context used when creating test suite in HelperMacros.
        -:   22: *
        -:   23: * Base class for all context used when creating test suite. The
        -:   24: * actual context type during test suite creation is TestSuiteBuilderContext.
        -:   25: *
        -:   26: * \sa CPPUNIT_TEST_SUITE, CPPUNIT_TEST_SUITE_ADD_TEST, 
        -:   27: *     CPPUNIT_TEST_SUITE_ADD_CUSTOM_TESTS.
        -:   28: */
        1:   29:class CPPUNIT_API TestSuiteBuilderContextBase
        -:   30:{
        -:   31:public:
        -:   32:  /*! \brief Constructs a new context.
        -:   33:   *
        -:   34:   * You should not use this. The context is created in 
        -:   35:   * CPPUNIT_TEST_SUITE().
        -:   36:   */
        -:   37:  TestSuiteBuilderContextBase( TestSuite &suite,
        -:   38:                               const TestNamer &namer,
        -:   39:                               TestFixtureFactory &factory );
        -:   40:
        -:   41:  virtual ~TestSuiteBuilderContextBase();
        -:   42:
        -:   43:  /*! \brief Adds a test to the fixture suite.
        -:   44:   *
        -:   45:   * \param test Test to add to the fixture suite. Must not be \c NULL.
        -:   46:   */
        -:   47:  void addTest( Test *test );
        -:   48:
        -:   49:  /*! \brief Returns the fixture name.
        -:   50:   * \return Fixture name. It is the name used to name the fixture
        -:   51:   *         suite.
        -:   52:   */
        -:   53:  std::string getFixtureName() const;
        -:   54:
        -:   55:  /*! \brief Returns the name of the test for the specified method.
        -:   56:   *
        -:   57:   * \param testMethodName Name of the method that implements a test.
        -:   58:   * \return A string that is the concatenation of the test fixture name 
        -:   59:   *         (returned by getFixtureName()) and\a testMethodName, 
        -:   60:   *         separated using '::'. This provides a fairly unique name for a given
        -:   61:   *         test.
        -:   62:   */
        -:   63:  std::string getTestNameFor( const std::string &testMethodName ) const;
        -:   64:
        -:   65:  /*! \brief Returns the name of the test for the specified method with the corresponding parameter.
        -:   66:   *
        -:   67:   * \param testMethodName Name (including a parameter) of the method that implements a test.
        -:   68:   * \return A string that is the concatenation of the test fixture name
        -:   69:   *         (returned by getFixtureName()), \a testMethodName,
        -:   70:   *         separated using '::' and the parameter. This provides a fairly unique name for a given
        -:   71:   *         test. The parameter must be convertable to std::string through operator<<
        -:   72:   *         or a specialization of CPPUNIT_NS::StringHelper::toString needs to exist.
        -:   73:   */
        -:   74:  template<typename T>
        -:   75:  std::string getTestNameFor( const std::string &testMethodName, const T& value ) const
        -:   76:  {
        -:   77:      return m_namer.getTestNameFor(testMethodName, value);
        -:   78:  }
        -:   79:
        -:   80:  /*! \brief Adds property pair.
        -:   81:   * \param key   PropertyKey string to add.
        -:   82:   * \param value PropertyValue string to add.
        -:   83:   */
        -:   84:  void addProperty( const std::string &key, 
        -:   85:                    const std::string &value );
        -:   86:  
        -:   87:  /*! \brief Returns property value assigned to param key.
        -:   88:   * \param key PropertyKey string.
        -:   89:   */
        -:   90:  const std::string getStringProperty( const std::string &key ) const;
        -:   91:
        -:   92:protected:
        -:   93:  TestFixture *makeTestFixture() const;
        -:   94:
        -:   95:  // Notes: we use a vector here instead of a map to work-around the
        -:   96:  // shared std::map in dll bug in VC6.
        -:   97:  // See http://www.dinkumware.com/vc_fixes.html for detail.
        -:   98:  typedef std::pair<std::string,std::string> Property;
        -:   99:  typedef std::vector<Property> Properties;
        -:  100:
        -:  101:  TestSuite &m_suite;
        -:  102:  const TestNamer &m_namer;
        -:  103:  TestFixtureFactory &m_factory;
        -:  104:
        -:  105:private:
        -:  106:  Properties m_properties;
        -:  107:};
        -:  108:
        -:  109:
        -:  110:/*! \brief Type-sage context used when creating test suite in HelperMacros.
        -:  111: * 
        -:  112: * \sa TestSuiteBuilderContextBase.
        -:  113: */
        -:  114:template<class Fixture>
        1:  115:class TestSuiteBuilderContext : public TestSuiteBuilderContextBase
        -:  116:{
        -:  117:public:
        -:  118:  typedef Fixture FixtureType;
        -:  119:
        1:  120:  TestSuiteBuilderContext( TestSuiteBuilderContextBase &contextBase )
        1:  121:      : TestSuiteBuilderContextBase( contextBase )
        -:  122:  {
        1:  123:  }
        -:  124:
        -:  125:  /*! \brief Returns a new TestFixture instance.
        -:  126:   * \return A new fixture instance. The fixture instance is returned by
        -:  127:   *         the TestFixtureFactory passed on construction. The actual type 
        -:  128:   *         is that of the fixture on which the static method suite() 
        -:  129:   *         was called.
        -:  130:   */
        1:  131:  FixtureType *makeFixture() const
        -:  132:  {
        1:  133:    return CPPUNIT_STATIC_CAST( FixtureType *, 
        -:  134:                                TestSuiteBuilderContextBase::makeTestFixture() );
        -:  135:  }
        -:  136:};
        -:  137:
        -:  138:
        -:  139:CPPUNIT_NS_END
        -:  140:
        -:  141:#if CPPUNIT_NEED_DLL_DECL
        -:  142:#pragma warning( pop )
        -:  143:#endif
        -:  144:
        -:  145:#endif // CPPUNIT_HELPER_TESTSUITEBUILDERCONTEXT_H
        -:  146:
